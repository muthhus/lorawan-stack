// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/lorawan.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForLoRaDataRate adds flags to select fields in LoRaDataRate.
func AddSelectFlagsForLoRaDataRate(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("bandwidth", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("bandwidth", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("spreading-factor", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("spreading-factor", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forLoRaDataRate message from select flags.
func PathsFromSelectFlagsForLoRaDataRate(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("bandwidth", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("bandwidth", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("spreading_factor", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("spreading_factor", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForFSKDataRate adds flags to select fields in FSKDataRate.
func AddSelectFlagsForFSKDataRate(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("bit-rate", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("bit-rate", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forFSKDataRate message from select flags.
func PathsFromSelectFlagsForFSKDataRate(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("bit_rate", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("bit_rate", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForLRFHSSDataRate adds flags to select fields in LRFHSSDataRate.
func AddSelectFlagsForLRFHSSDataRate(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("modulation-type", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("modulation-type", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("operating-channel-width", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("operating-channel-width", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("coding-rate", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("coding-rate", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forLRFHSSDataRate message from select flags.
func PathsFromSelectFlagsForLRFHSSDataRate(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("modulation_type", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("modulation_type", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("operating_channel_width", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("operating_channel_width", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("coding_rate", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("coding_rate", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForDataRate adds flags to select fields in DataRate.
func AddSelectFlagsForDataRate(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("modulation.lora", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("modulation.lora", prefix), true), hidden))
	AddSelectFlagsForLoRaDataRate(flags, flagsplugin.Prefix("modulation.lora", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("modulation.fsk", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("modulation.fsk", prefix), true), hidden))
	AddSelectFlagsForFSKDataRate(flags, flagsplugin.Prefix("modulation.fsk", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("modulation.lrfhss", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("modulation.lrfhss", prefix), true), hidden))
	AddSelectFlagsForLRFHSSDataRate(flags, flagsplugin.Prefix("modulation.lrfhss", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forDataRate message from select flags.
func PathsFromSelectFlagsForDataRate(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("modulation.lora", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("modulation.lora", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForLoRaDataRate(flags, flagsplugin.Prefix("modulation.lora", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("modulation.fsk", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("modulation.fsk", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForFSKDataRate(flags, flagsplugin.Prefix("modulation.fsk", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("modulation.lrfhss", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("modulation.lrfhss", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForLRFHSSDataRate(flags, flagsplugin.Prefix("modulation.lrfhss", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSelectFlagsForTxSettings_Downlink adds flags to select fields in TxSettings_Downlink.
func AddSelectFlagsForTxSettings_Downlink(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("antenna-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("antenna-index", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tx-power", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tx-power", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("invert-polarization", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("invert-polarization", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forTxSettings_Downlink message from select flags.
func PathsFromSelectFlagsForTxSettings_Downlink(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("antenna_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("antenna_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tx_power", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("tx_power", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("invert_polarization", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("invert_polarization", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForTxSettings adds flags to select fields in TxSettings.
func AddSelectFlagsForTxSettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate", prefix), true), hidden))
	// NOTE: data_rate (DataRate) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("coding-rate", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("coding-rate", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frequency", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enable-crc", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("enable-crc", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("timestamp", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("timestamp", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("time", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink", prefix), true), hidden))
	AddSelectFlagsForTxSettings_Downlink(flags, flagsplugin.Prefix("downlink", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forTxSettings message from select flags.
func PathsFromSelectFlagsForTxSettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate", prefix))
	}
	// NOTE: data_rate (DataRate) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("coding_rate", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("coding_rate", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enable_crc", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("enable_crc", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("timestamp", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("timestamp", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("time", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("time", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForTxSettings_Downlink(flags, flagsplugin.Prefix("downlink", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSelectFlagsForFrequencyValue adds flags to select fields in FrequencyValue.
func AddSelectFlagsForFrequencyValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forFrequencyValue message from select flags.
func PathsFromSelectFlagsForFrequencyValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForFrequencyValue adds flags to select fields in FrequencyValue.
func AddSetFlagsForFrequencyValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("value", prefix), "", hidden))
}

// SetFromFlags sets the FrequencyValue message from flags.
func (m *FrequencyValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Value = val
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForDataRateOffsetValue adds flags to select fields in DataRateOffsetValue.
func AddSelectFlagsForDataRateOffsetValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forDataRateOffsetValue message from select flags.
func PathsFromSelectFlagsForDataRateOffsetValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForDataRateOffsetValue adds flags to select fields in DataRateOffsetValue.
func AddSetFlagsForDataRateOffsetValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), flagsplugin.EnumValueDesc(DataRateOffset_value), hidden))
}

// SetFromFlags sets the DataRateOffsetValue message from flags.
func (m *DataRateOffsetValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateOffset_value)
		if err != nil {
			return nil, err
		}
		m.Value = DataRateOffset(enumValue)
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForDataRateIndexValue adds flags to select fields in DataRateIndexValue.
func AddSelectFlagsForDataRateIndexValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forDataRateIndexValue message from select flags.
func PathsFromSelectFlagsForDataRateIndexValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForDataRateIndexValue adds flags to select fields in DataRateIndexValue.
func AddSetFlagsForDataRateIndexValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value), hidden))
}

// SetFromFlags sets the DataRateIndexValue message from flags.
func (m *DataRateIndexValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value)
		if err != nil {
			return nil, err
		}
		m.Value = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForPingSlotPeriodValue adds flags to select fields in PingSlotPeriodValue.
func AddSelectFlagsForPingSlotPeriodValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forPingSlotPeriodValue message from select flags.
func PathsFromSelectFlagsForPingSlotPeriodValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForPingSlotPeriodValue adds flags to select fields in PingSlotPeriodValue.
func AddSetFlagsForPingSlotPeriodValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), flagsplugin.EnumValueDesc(PingSlotPeriod_value), hidden))
}

// SetFromFlags sets the PingSlotPeriodValue message from flags.
func (m *PingSlotPeriodValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, PingSlotPeriod_value)
		if err != nil {
			return nil, err
		}
		m.Value = PingSlotPeriod(enumValue)
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForAggregatedDutyCycleValue adds flags to select fields in AggregatedDutyCycleValue.
func AddSelectFlagsForAggregatedDutyCycleValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forAggregatedDutyCycleValue message from select flags.
func PathsFromSelectFlagsForAggregatedDutyCycleValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForAggregatedDutyCycleValue adds flags to select fields in AggregatedDutyCycleValue.
func AddSetFlagsForAggregatedDutyCycleValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), flagsplugin.EnumValueDesc(AggregatedDutyCycle_value), hidden))
}

// SetFromFlags sets the AggregatedDutyCycleValue message from flags.
func (m *AggregatedDutyCycleValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, AggregatedDutyCycle_value)
		if err != nil {
			return nil, err
		}
		m.Value = AggregatedDutyCycle(enumValue)
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForRxDelayValue adds flags to select fields in RxDelayValue.
func AddSelectFlagsForRxDelayValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forRxDelayValue message from select flags.
func PathsFromSelectFlagsForRxDelayValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForRxDelayValue adds flags to select fields in RxDelayValue.
func AddSetFlagsForRxDelayValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), flagsplugin.EnumValueDesc(RxDelay_value), hidden))
}

// SetFromFlags sets the RxDelayValue message from flags.
func (m *RxDelayValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RxDelay_value)
		if err != nil {
			return nil, err
		}
		m.Value = RxDelay(enumValue)
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForADRAckLimitExponentValue adds flags to select fields in ADRAckLimitExponentValue.
func AddSelectFlagsForADRAckLimitExponentValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forADRAckLimitExponentValue message from select flags.
func PathsFromSelectFlagsForADRAckLimitExponentValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForADRAckLimitExponentValue adds flags to select fields in ADRAckLimitExponentValue.
func AddSetFlagsForADRAckLimitExponentValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), flagsplugin.EnumValueDesc(ADRAckLimitExponent_value), hidden))
}

// SetFromFlags sets the ADRAckLimitExponentValue message from flags.
func (m *ADRAckLimitExponentValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, ADRAckLimitExponent_value)
		if err != nil {
			return nil, err
		}
		m.Value = ADRAckLimitExponent(enumValue)
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForADRAckDelayExponentValue adds flags to select fields in ADRAckDelayExponentValue.
func AddSelectFlagsForADRAckDelayExponentValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forADRAckDelayExponentValue message from select flags.
func PathsFromSelectFlagsForADRAckDelayExponentValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForADRAckDelayExponentValue adds flags to select fields in ADRAckDelayExponentValue.
func AddSetFlagsForADRAckDelayExponentValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), flagsplugin.EnumValueDesc(ADRAckDelayExponent_value), hidden))
}

// SetFromFlags sets the ADRAckDelayExponentValue message from flags.
func (m *ADRAckDelayExponentValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, ADRAckDelayExponent_value)
		if err != nil {
			return nil, err
		}
		m.Value = ADRAckDelayExponent(enumValue)
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForDeviceEIRPValue adds flags to select fields in DeviceEIRPValue.
func AddSelectFlagsForDeviceEIRPValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forDeviceEIRPValue message from select flags.
func PathsFromSelectFlagsForDeviceEIRPValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForDeviceEIRPValue adds flags to select fields in DeviceEIRPValue.
func AddSetFlagsForDeviceEIRPValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), flagsplugin.EnumValueDesc(DeviceEIRP_value), hidden))
}

// SetFromFlags sets the DeviceEIRPValue message from flags.
func (m *DeviceEIRPValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DeviceEIRP_value)
		if err != nil {
			return nil, err
		}
		m.Value = DeviceEIRP(enumValue)
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}
