// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/applicationserver_pubsub.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForApplicationPubSubIdentifiers adds flags to select fields in ApplicationPubSubIdentifiers.
func AddSelectFlagsForApplicationPubSubIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-ids", prefix), true), hidden))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pub-sub-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pub-sub-id", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSubIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationPubSubIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pub_sub_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pub_sub_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSubIdentifiers adds flags to select fields in ApplicationPubSubIdentifiers.
func AddSetFlagsForApplicationPubSubIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("pub-sub-id", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationPubSubIdentifiers message from flags.
func (m *ApplicationPubSubIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application_ids", prefix)); selected {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("pub_sub_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.PubSubId = val
		paths = append(paths, flagsplugin.Prefix("pub_sub_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_NATSProvider adds flags to select fields in ApplicationPubSub_NATSProvider.
func AddSelectFlagsForApplicationPubSub_NATSProvider(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("server-url", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("server-url", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_NATSProvider message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_NATSProvider(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("server_url", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("server_url", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_NATSProvider adds flags to select fields in ApplicationPubSub_NATSProvider.
func AddSetFlagsForApplicationPubSub_NATSProvider(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("server-url", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationPubSub_NATSProvider message from flags.
func (m *ApplicationPubSub_NATSProvider) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("server_url", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.ServerUrl = val
		paths = append(paths, flagsplugin.Prefix("server_url", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_MQTTProvider adds flags to select fields in ApplicationPubSub_MQTTProvider.
func AddSelectFlagsForApplicationPubSub_MQTTProvider(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("server-url", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("server-url", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("client-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("client-id", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("username", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("username", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("password", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("password", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("subscribe-qos", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("subscribe-qos", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("publish-qos", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("publish-qos", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("use-tls", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("use-tls", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tls-ca", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tls-ca", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tls-client-cert", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tls-client-cert", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tls-client-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tls-client-key", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("headers", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("headers", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_MQTTProvider message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_MQTTProvider(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("server_url", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("server_url", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("client_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("client_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("username", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("username", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("password", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("password", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("subscribe_qos", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("subscribe_qos", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("publish_qos", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("publish_qos", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("use_tls", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("use_tls", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tls_ca", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("tls_ca", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tls_client_cert", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("tls_client_cert", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tls_client_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("tls_client_key", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("headers", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("headers", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_MQTTProvider adds flags to select fields in ApplicationPubSub_MQTTProvider.
func AddSetFlagsForApplicationPubSub_MQTTProvider(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("server-url", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("client-id", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("username", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("password", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("subscribe-qos", prefix), flagsplugin.EnumValueDesc(ApplicationPubSub_MQTTProvider_QoS_value), hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("publish-qos", prefix), flagsplugin.EnumValueDesc(ApplicationPubSub_MQTTProvider_QoS_value), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("use-tls", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("tls-ca", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("tls-client-cert", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("tls-client-key", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("headers", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationPubSub_MQTTProvider message from flags.
func (m *ApplicationPubSub_MQTTProvider) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("server_url", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.ServerUrl = val
		paths = append(paths, flagsplugin.Prefix("server_url", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("client_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.ClientId = val
		paths = append(paths, flagsplugin.Prefix("client_id", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("username", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Username = val
		paths = append(paths, flagsplugin.Prefix("username", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("password", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Password = val
		paths = append(paths, flagsplugin.Prefix("password", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("subscribe_qos", prefix)); err != nil {
		return nil, err
	} else if selected {
		enumValue, err := flagsplugin.SetEnumString(val, ApplicationPubSub_MQTTProvider_QoS_value)
		if err != nil {
			return nil, err
		}
		m.SubscribeQos = ApplicationPubSub_MQTTProvider_QoS(enumValue)
		paths = append(paths, flagsplugin.Prefix("subscribe_qos", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("publish_qos", prefix)); err != nil {
		return nil, err
	} else if selected {
		enumValue, err := flagsplugin.SetEnumString(val, ApplicationPubSub_MQTTProvider_QoS_value)
		if err != nil {
			return nil, err
		}
		m.PublishQos = ApplicationPubSub_MQTTProvider_QoS(enumValue)
		paths = append(paths, flagsplugin.Prefix("publish_qos", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("use_tls", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.UseTls = val
		paths = append(paths, flagsplugin.Prefix("use_tls", prefix))
	}
	if val, selected, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("tls_ca", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TlsCa = val
		paths = append(paths, flagsplugin.Prefix("tls_ca", prefix))
	}
	if val, selected, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("tls_client_cert", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TlsClientCert = val
		paths = append(paths, flagsplugin.Prefix("tls_client_cert", prefix))
	}
	if val, selected, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("tls_client_key", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.TlsClientKey = val
		paths = append(paths, flagsplugin.Prefix("tls_client_key", prefix))
	}
	if val, selected, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("headers", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Headers = val
		paths = append(paths, flagsplugin.Prefix("headers", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey adds flags to select fields in ApplicationPubSub_AWSIoTProvider_AccessKey.
func AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("access-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("access-key-id", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("secret-access-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("secret-access-key", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-token", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-token", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_AWSIoTProvider_AccessKey message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("access_key_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("access_key_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("secret_access_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("secret_access_key", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session_token", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session_token", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_AWSIoTProvider_AccessKey adds flags to select fields in ApplicationPubSub_AWSIoTProvider_AccessKey.
func AddSetFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("access-key-id", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("secret-access-key", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("session-token", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationPubSub_AWSIoTProvider_AccessKey message from flags.
func (m *ApplicationPubSub_AWSIoTProvider_AccessKey) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("access_key_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.AccessKeyId = val
		paths = append(paths, flagsplugin.Prefix("access_key_id", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("secret_access_key", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.SecretAccessKey = val
		paths = append(paths, flagsplugin.Prefix("secret_access_key", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("session_token", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.SessionToken = val
		paths = append(paths, flagsplugin.Prefix("session_token", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole adds flags to select fields in ApplicationPubSub_AWSIoTProvider_AssumeRole.
func AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("arn", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("arn", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("external-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("external-id", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-duration", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-duration", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_AWSIoTProvider_AssumeRole message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("arn", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("arn", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("external_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("external_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session_duration", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session_duration", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole adds flags to select fields in ApplicationPubSub_AWSIoTProvider_AssumeRole.
func AddSetFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("arn", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("external-id", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("session-duration", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationPubSub_AWSIoTProvider_AssumeRole message from flags.
func (m *ApplicationPubSub_AWSIoTProvider_AssumeRole) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("arn", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Arn = val
		paths = append(paths, flagsplugin.Prefix("arn", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("external_id", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.ExternalId = val
		paths = append(paths, flagsplugin.Prefix("external_id", prefix))
	}
	if val, selected, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("session_duration", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.SessionDuration = gogo.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("session_duration", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration adds flags to select fields in ApplicationPubSub_AWSIoTProvider_DefaultIntegration.
func AddSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("stack-name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("stack-name", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_AWSIoTProvider_DefaultIntegration message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("stack_name", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("stack_name", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration adds flags to select fields in ApplicationPubSub_AWSIoTProvider_DefaultIntegration.
func AddSetFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("stack-name", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationPubSub_AWSIoTProvider_DefaultIntegration message from flags.
func (m *ApplicationPubSub_AWSIoTProvider_DefaultIntegration) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("stack_name", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.StackName = val
		paths = append(paths, flagsplugin.Prefix("stack_name", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_AWSIoTProvider adds flags to select fields in ApplicationPubSub_AWSIoTProvider.
func AddSelectFlagsForApplicationPubSub_AWSIoTProvider(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("region", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("region", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("access-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("access-key", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags, flagsplugin.Prefix("access-key", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("assume-role", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("assume-role", prefix), true), hidden))
	// NOTE: assume_role (ApplicationPubSub_AWSIoTProvider_AssumeRole) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("endpoint-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("endpoint-address", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deployment.default", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("deployment.default", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags, flagsplugin.Prefix("deployment.default", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_AWSIoTProvider message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("region", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("region", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("access_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("access_key", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags, flagsplugin.Prefix("access_key", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("assume_role", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("assume_role", prefix))
	}
	// NOTE: assume_role (ApplicationPubSub_AWSIoTProvider_AssumeRole) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("endpoint_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("endpoint_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deployment.default", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("deployment.default", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags, flagsplugin.Prefix("deployment.default", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_AWSIoTProvider adds flags to select fields in ApplicationPubSub_AWSIoTProvider.
func AddSetFlagsForApplicationPubSub_AWSIoTProvider(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("region", prefix), "", hidden))
	AddSetFlagsForApplicationPubSub_AWSIoTProvider_AccessKey(flags, flagsplugin.Prefix("access-key", prefix), hidden)
	AddSetFlagsForApplicationPubSub_AWSIoTProvider_AssumeRole(flags, flagsplugin.Prefix("assume-role", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("endpoint-address", prefix), "", hidden))
	AddSetFlagsForApplicationPubSub_AWSIoTProvider_DefaultIntegration(flags, flagsplugin.Prefix("deployment.default", prefix), hidden)
}

// SetFromFlags sets the ApplicationPubSub_AWSIoTProvider message from flags.
func (m *ApplicationPubSub_AWSIoTProvider) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("region", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Region = val
		paths = append(paths, flagsplugin.Prefix("region", prefix))
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("access_key", prefix)); selected {
		m.AccessKey = &ApplicationPubSub_AWSIoTProvider_AccessKey{}
		if setPaths, err := m.AccessKey.SetFromFlags(flags, flagsplugin.Prefix("access_key", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("assume_role", prefix)); selected {
		m.AssumeRole = &ApplicationPubSub_AWSIoTProvider_AssumeRole{}
		if setPaths, err := m.AssumeRole.SetFromFlags(flags, flagsplugin.Prefix("assume_role", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("endpoint_address", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.EndpointAddress = val
		paths = append(paths, flagsplugin.Prefix("endpoint_address", prefix))
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("deployment.default", prefix)); selected {
		ov := &ApplicationPubSub_AWSIoTProvider_Default{}
		ov.Default = &ApplicationPubSub_AWSIoTProvider_DefaultIntegration{}
		if setPaths, err := ov.Default.SetFromFlags(flags, flagsplugin.Prefix("deployment.default", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Deployment = ov
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub_Message adds flags to select fields in ApplicationPubSub_Message.
func AddSelectFlagsForApplicationPubSub_Message(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("topic", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("topic", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub_Message message from select flags.
func PathsFromSelectFlagsForApplicationPubSub_Message(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("topic", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("topic", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub_Message adds flags to select fields in ApplicationPubSub_Message.
func AddSetFlagsForApplicationPubSub_Message(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("topic", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationPubSub_Message message from flags.
func (m *ApplicationPubSub_Message) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("topic", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Topic = val
		paths = append(paths, flagsplugin.Prefix("topic", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationPubSub adds flags to select fields in ApplicationPubSub.
func AddSelectFlagsForApplicationPubSub(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true), hidden))
	// NOTE: ids (ApplicationPubSubIdentifiers) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("format", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("format", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provider.nats", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provider.nats", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_NATSProvider(flags, flagsplugin.Prefix("provider.nats", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provider.mqtt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provider.mqtt", prefix), true), hidden))
	// NOTE: mqtt (ApplicationPubSub_MQTTProvider) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provider.aws-iot", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provider.aws-iot", prefix), true), hidden))
	// NOTE: aws_iot (ApplicationPubSub_AWSIoTProvider) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("base-topic", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("base-topic", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-push", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-push", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-push", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-replace", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-replace", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-replace", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-message", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-message", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("uplink-message", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("join-accept", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("join-accept", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("join-accept", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-ack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-ack", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-ack", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-nack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-nack", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-nack", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-sent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-sent", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-sent", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-failed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-failed", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-failed", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-queued", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-queued", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queued", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-queue-invalidated", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-queue-invalidated", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location-solved", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location-solved", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("location-solved", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service-data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service-data", prefix), true), hidden))
	AddSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("service-data", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forApplicationPubSub message from select flags.
func PathsFromSelectFlagsForApplicationPubSub(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ids", prefix))
	}
	// NOTE: ids (ApplicationPubSubIdentifiers) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("updated_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("format", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("format", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provider.nats", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("provider.nats", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_NATSProvider(flags, flagsplugin.Prefix("provider.nats", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provider.mqtt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("provider.mqtt", prefix))
	}
	// NOTE: mqtt (ApplicationPubSub_MQTTProvider) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provider.aws_iot", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("provider.aws_iot", prefix))
	}
	// NOTE: aws_iot (ApplicationPubSub_AWSIoTProvider) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("base_topic", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("base_topic", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_push", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_push", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink_push", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_replace", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_replace", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink_replace", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_message", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_message", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("uplink_message", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("join_accept", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("join_accept", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("join_accept", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_ack", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_ack", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink_ack", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_nack", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_nack", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink_nack", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_sent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_sent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink_sent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_failed", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_failed", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink_failed", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_queued", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_queued", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink_queued", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_queue_invalidated", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_queue_invalidated", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink_queue_invalidated", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location_solved", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("location_solved", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("location_solved", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service_data", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("service_data", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("service_data", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForApplicationPubSub adds flags to select fields in ApplicationPubSub.
func AddSetFlagsForApplicationPubSub(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForApplicationPubSubIdentifiers(flags, flagsplugin.Prefix("ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("format", prefix), "", hidden))
	AddSetFlagsForApplicationPubSub_NATSProvider(flags, flagsplugin.Prefix("provider.nats", prefix), hidden)
	AddSetFlagsForApplicationPubSub_MQTTProvider(flags, flagsplugin.Prefix("provider.mqtt", prefix), hidden)
	AddSetFlagsForApplicationPubSub_AWSIoTProvider(flags, flagsplugin.Prefix("provider.aws-iot", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("base-topic", prefix), "", hidden))
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-push", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-replace", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("uplink-message", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("join-accept", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-ack", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-nack", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-sent", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-failed", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queued", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("location-solved", prefix), hidden)
	AddSetFlagsForApplicationPubSub_Message(flags, flagsplugin.Prefix("service-data", prefix), hidden)
}

// SetFromFlags sets the ApplicationPubSub message from flags.
func (m *ApplicationPubSub) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix)); selected {
		m.Ids = &ApplicationPubSubIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.CreatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated_at", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.UpdatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("updated_at", prefix))
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("format", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.Format = val
		paths = append(paths, flagsplugin.Prefix("format", prefix))
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("provider.nats", prefix)); selected {
		ov := &ApplicationPubSub_Nats{}
		ov.Nats = &ApplicationPubSub_NATSProvider{}
		if setPaths, err := ov.Nats.SetFromFlags(flags, flagsplugin.Prefix("provider.nats", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Provider = ov
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("provider.mqtt", prefix)); selected {
		ov := &ApplicationPubSub_Mqtt{}
		ov.Mqtt = &ApplicationPubSub_MQTTProvider{}
		if setPaths, err := ov.Mqtt.SetFromFlags(flags, flagsplugin.Prefix("provider.mqtt", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Provider = ov
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("provider.aws_iot", prefix)); selected {
		ov := &ApplicationPubSub_AwsIot{}
		ov.AwsIot = &ApplicationPubSub_AWSIoTProvider{}
		if setPaths, err := ov.AwsIot.SetFromFlags(flags, flagsplugin.Prefix("provider.aws_iot", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
		m.Provider = ov
	}
	if val, selected, err := flagsplugin.GetString(flags, flagsplugin.Prefix("base_topic", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.BaseTopic = val
		paths = append(paths, flagsplugin.Prefix("base_topic", prefix))
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_push", prefix)); selected {
		m.DownlinkPush = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkPush.SetFromFlags(flags, flagsplugin.Prefix("downlink_push", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_replace", prefix)); selected {
		m.DownlinkReplace = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkReplace.SetFromFlags(flags, flagsplugin.Prefix("downlink_replace", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("uplink_message", prefix)); selected {
		m.UplinkMessage = &ApplicationPubSub_Message{}
		if setPaths, err := m.UplinkMessage.SetFromFlags(flags, flagsplugin.Prefix("uplink_message", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("join_accept", prefix)); selected {
		m.JoinAccept = &ApplicationPubSub_Message{}
		if setPaths, err := m.JoinAccept.SetFromFlags(flags, flagsplugin.Prefix("join_accept", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_ack", prefix)); selected {
		m.DownlinkAck = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkAck.SetFromFlags(flags, flagsplugin.Prefix("downlink_ack", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_nack", prefix)); selected {
		m.DownlinkNack = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkNack.SetFromFlags(flags, flagsplugin.Prefix("downlink_nack", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_sent", prefix)); selected {
		m.DownlinkSent = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkSent.SetFromFlags(flags, flagsplugin.Prefix("downlink_sent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_failed", prefix)); selected {
		m.DownlinkFailed = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkFailed.SetFromFlags(flags, flagsplugin.Prefix("downlink_failed", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_queued", prefix)); selected {
		m.DownlinkQueued = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkQueued.SetFromFlags(flags, flagsplugin.Prefix("downlink_queued", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_queue_invalidated", prefix)); selected {
		m.DownlinkQueueInvalidated = &ApplicationPubSub_Message{}
		if setPaths, err := m.DownlinkQueueInvalidated.SetFromFlags(flags, flagsplugin.Prefix("downlink_queue_invalidated", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("location_solved", prefix)); selected {
		m.LocationSolved = &ApplicationPubSub_Message{}
		if setPaths, err := m.LocationSolved.SetFromFlags(flags, flagsplugin.Prefix("location_solved", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("service_data", prefix)); selected {
		m.ServiceData = &ApplicationPubSub_Message{}
		if setPaths, err := m.ServiceData.SetFromFlags(flags, flagsplugin.Prefix("service_data", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSetFlagsForListApplicationPubSubsRequest adds flags to select fields in ListApplicationPubSubsRequest.
func AddSetFlagsForListApplicationPubSubsRequest(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("field-mask", prefix), "", hidden))
}

// SetFromFlags sets the ListApplicationPubSubsRequest message from flags.
func (m *ListApplicationPubSubsRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if selected := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application_ids", prefix)); selected {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, selected, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("field_mask", prefix)); err != nil {
		return nil, err
	} else if selected {
		m.FieldMask = gogo.SetFieldMask(val)
		paths = append(paths, flagsplugin.Prefix("field_mask", prefix))
	}
	return paths, nil
}
