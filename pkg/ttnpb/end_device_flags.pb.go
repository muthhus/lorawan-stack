// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/end_device.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	types "github.com/gogo/protobuf/types"
	pflag "github.com/spf13/pflag"
	custom_flags "go.thethings.network/lorawan-stack/v3/cmd/ttn-lw-cli/custom_flags"
	types1 "go.thethings.network/lorawan-stack/v3/pkg/types"
)

// AddSelectFlagsForBoolValue adds flags to select fields in BoolValue.
func AddSelectFlagsForBoolValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forBoolValue message from select flags.
func PathsFromSelectFlagsForBoolValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForBoolValue adds flags to select fields in BoolValue.
func AddSetFlagsForBoolValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), "", hidden))
}

// SetFromFlags sets the BoolValue message from flags.
func (m *BoolValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Value = val
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForMACParameters_Channel adds flags to select fields in MACParameters_Channel.
func AddSelectFlagsForMACParameters_Channel(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-frequency", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-frequency", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-data-rate-index", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-data-rate-index", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enable-uplink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("enable-uplink", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forMACParameters_Channel message from select flags.
func PathsFromSelectFlagsForMACParameters_Channel(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("min_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enable_uplink", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("enable_uplink", prefix))
	}
	return paths, nil
}

// AddSetFlagsForMACParameters_Channel adds flags to select fields in MACParameters_Channel.
func AddSetFlagsForMACParameters_Channel(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("uplink-frequency", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("downlink-frequency", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value), hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enable-uplink", prefix), "", hidden))
}

// SetFromFlags sets the MACParameters_Channel message from flags.
func (m *MACParameters_Channel) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("uplink_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.UplinkFrequency = val
		paths = append(paths, flagsplugin.Prefix("uplink_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("downlink_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DownlinkFrequency = val
		paths = append(paths, flagsplugin.Prefix("downlink_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value)
		if err != nil {
			return nil, err
		}
		m.MinDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("min_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value)
		if err != nil {
			return nil, err
		}
		m.MaxDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("max_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enable_uplink", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.EnableUplink = val
		paths = append(paths, flagsplugin.Prefix("enable_uplink", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForMACParameters adds flags to select fields in MACParameters.
func AddSelectFlagsForMACParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-eirp", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-eirp", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-data-rate-index", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-tx-power-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-tx-power-index", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-nb-trans", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-nb-trans", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-limit", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-limit", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-delay", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-delay", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-data-rate-offset", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-data-rate-index", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-frequency", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-duty-cycle", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejoin-time-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejoin-time-periodicity", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejoin-count-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejoin-count-periodicity", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-frequency", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("beacon-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("beacon-frequency", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("channels", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("channels", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-dwell-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-dwell-time", prefix), true), hidden))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("uplink-dwell-time", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-dwell-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-dwell-time", prefix), true), hidden))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("downlink-dwell-time", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-limit-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-limit-exponent", prefix), true), hidden))
	AddSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-delay-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-delay-exponent", prefix), true), hidden))
	AddSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), true), hidden))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forMACParameters message from select flags.
func PathsFromSelectFlagsForMACParameters(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_eirp", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_eirp", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_tx_power_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_tx_power_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_nb_trans", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_nb_trans", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_ack_limit", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_ack_limit", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_ack_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_ack_delay", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx1_delay", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx1_data_rate_offset", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx2_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx2_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_duty_cycle", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejoin_time_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejoin_time_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejoin_count_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejoin_count_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("beacon_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("channels", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("channels", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_dwell_time", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_dwell_time", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_ack_limit_exponent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_ack_limit_exponent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("adr_ack_limit_exponent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_ack_delay_exponent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_ack_delay_exponent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("adr_ack_delay_exponent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForMACParameters adds flags to select fields in MACParameters.
func AddSetFlagsForMACParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("max-eirp", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("adr-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value), hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-tx-power-index", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-nb-trans", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-ack-limit", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-ack-delay", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.EnumValueDesc(RxDelay_value), hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.EnumValueDesc(DataRateOffset_value), hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value), hidden))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("rx2-frequency", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.EnumValueDesc(AggregatedDutyCycle_value), hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rejoin-time-periodicity", prefix), flagsplugin.EnumValueDesc(RejoinTimeExponent_value), hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rejoin-count-periodicity", prefix), flagsplugin.EnumValueDesc(RejoinCountExponent_value), hidden))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("ping-slot-frequency", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value), hidden))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("beacon-frequency", prefix), "", hidden))
	// FIXME: Skipping Channels because repeated messages are currently not supported.
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("uplink-dwell-time", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("uplink-dwell-time.value", prefix), flagsplugin.Prefix("uplink-dwell-time", prefix), hidden)
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("downlink-dwell-time", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("downlink-dwell-time.value", prefix), flagsplugin.Prefix("downlink-dwell-time", prefix), hidden)
	AddSetFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("adr-ack-limit-exponent.value", prefix), flagsplugin.Prefix("adr-ack-limit-exponent", prefix), hidden)
	AddSetFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("adr-ack-delay-exponent.value", prefix), flagsplugin.Prefix("adr-ack-delay-exponent", prefix), hidden)
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value.value", prefix), flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), hidden)
}

// SetFromFlags sets the MACParameters message from flags.
func (m *MACParameters) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("max_eirp", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MaxEirp = val
		paths = append(paths, flagsplugin.Prefix("max_eirp", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("adr_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value)
		if err != nil {
			return nil, err
		}
		m.AdrDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("adr_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr_tx_power_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrTxPowerIndex = val
		paths = append(paths, flagsplugin.Prefix("adr_tx_power_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr_nb_trans", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrNbTrans = val
		paths = append(paths, flagsplugin.Prefix("adr_nb_trans", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr_ack_limit", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrAckLimit = val
		paths = append(paths, flagsplugin.Prefix("adr_ack_limit", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr_ack_delay", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrAckDelay = val
		paths = append(paths, flagsplugin.Prefix("adr_ack_delay", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RxDelay_value)
		if err != nil {
			return nil, err
		}
		m.Rx1Delay = RxDelay(enumValue)
		paths = append(paths, flagsplugin.Prefix("rx1_delay", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateOffset_value)
		if err != nil {
			return nil, err
		}
		m.Rx1DataRateOffset = DataRateOffset(enumValue)
		paths = append(paths, flagsplugin.Prefix("rx1_data_rate_offset", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value)
		if err != nil {
			return nil, err
		}
		m.Rx2DataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("rx2_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Rx2Frequency = val
		paths = append(paths, flagsplugin.Prefix("rx2_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, AggregatedDutyCycle_value)
		if err != nil {
			return nil, err
		}
		m.MaxDutyCycle = AggregatedDutyCycle(enumValue)
		paths = append(paths, flagsplugin.Prefix("max_duty_cycle", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rejoin_time_periodicity", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RejoinTimeExponent_value)
		if err != nil {
			return nil, err
		}
		m.RejoinTimePeriodicity = RejoinTimeExponent(enumValue)
		paths = append(paths, flagsplugin.Prefix("rejoin_time_periodicity", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rejoin_count_periodicity", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RejoinCountExponent_value)
		if err != nil {
			return nil, err
		}
		m.RejoinCountPeriodicity = RejoinCountExponent(enumValue)
		paths = append(paths, flagsplugin.Prefix("rejoin_count_periodicity", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.PingSlotFrequency = val
		paths = append(paths, flagsplugin.Prefix("ping_slot_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value)
		if err != nil {
			return nil, err
		}
		m.PingSlotDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("ping_slot_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BeaconFrequency = val
		paths = append(paths, flagsplugin.Prefix("beacon_frequency", prefix))
	}
	// FIXME: Skipping Channels because it does not seem to implement AddSetFlags.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); changed {
		m.UplinkDwellTime = &BoolValue{}
		if setPaths, err := m.UplinkDwellTime.SetFromFlags(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); changed {
		m.DownlinkDwellTime = &BoolValue{}
		if setPaths, err := m.DownlinkDwellTime.SetFromFlags(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("adr_ack_limit_exponent", prefix)); changed {
		m.AdrAckLimitExponent = &ADRAckLimitExponentValue{}
		if setPaths, err := m.AdrAckLimitExponent.SetFromFlags(flags, flagsplugin.Prefix("adr_ack_limit_exponent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("adr_ack_delay_exponent", prefix)); changed {
		m.AdrAckDelayExponent = &ADRAckDelayExponentValue{}
		if setPaths, err := m.AdrAckDelayExponent.SetFromFlags(flags, flagsplugin.Prefix("adr_ack_delay_exponent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix)); changed {
		m.PingSlotDataRateIndexValue = &DataRateIndexValue{}
		if setPaths, err := m.PingSlotDataRateIndexValue.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForMACSettings adds flags to select fields in MACSettings.
func AddSelectFlagsForMACSettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-b-timeout", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-b-timeout", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-periodicity", prefix), true), hidden))
	AddSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), true), hidden))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-frequency", prefix), true), hidden))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("ping-slot-frequency", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("beacon-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("beacon-frequency", prefix), true), hidden))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("beacon-frequency", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-c-timeout", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-c-timeout", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-delay", prefix), true), hidden))
	AddSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("rx1-delay", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-data-rate-offset", prefix), true), hidden))
	AddSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-data-rate-index", prefix), true), hidden))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-frequency", prefix), true), hidden))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("rx2-frequency", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("factory-preset-frequencies", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("factory-preset-frequencies", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-duty-cycle", prefix), true), hidden))
	AddSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("max-duty-cycle", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), true), hidden))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("use-adr", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("use-adr", prefix), true), hidden))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("use-adr", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-margin", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-margin", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("resets-f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("resets-f-cnt", prefix), true), hidden))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("resets-f-cnt", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-time-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status-time-periodicity", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-count-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status-count-periodicity", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx1-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx1-delay", prefix), true), hidden))
	AddSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("desired-rx1-delay", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), true), hidden))
	AddSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), true), hidden))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx2-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx2-frequency", prefix), true), hidden))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-max-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-max-duty-cycle", prefix), true), hidden))
	AddSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), true), hidden))
	AddSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), true), hidden))
	AddSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), true), hidden))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-ping-slot-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-ping-slot-frequency", prefix), true), hidden))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-beacon-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-beacon-frequency", prefix), true), hidden))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-max-eirp", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-max-eirp", prefix), true), hidden))
	AddSelectFlagsForDeviceEIRPValue(flags, flagsplugin.Prefix("desired-max-eirp", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-b-c-downlink-interval", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-b-c-downlink-interval", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forMACSettings message from select flags.
func PathsFromSelectFlagsForMACSettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class_b_timeout", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("class_b_timeout", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_periodicity", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("beacon_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class_c_timeout", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("class_c_timeout", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx1_delay", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx1_data_rate_offset", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx2_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx2_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("factory_preset_frequencies", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("factory_preset_frequencies", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_duty_cycle", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("use_adr", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("use_adr", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("use_adr", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_margin", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_margin", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("resets_f_cnt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("resets_f_cnt", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("resets_f_cnt", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status_time_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("status_time_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status_count_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("status_count_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_rx1_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_rx1_delay", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("desired_rx1_delay", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_rx2_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_rx2_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired_rx2_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_max_duty_cycle", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("desired_max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_ping_slot_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired_ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_beacon_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_beacon_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired_beacon_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_max_eirp", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_max_eirp", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDeviceEIRPValue(flags, flagsplugin.Prefix("desired_max_eirp", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class_b_c_downlink_interval", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("class_b_c_downlink_interval", prefix))
	}
	return paths, nil
}

// AddSetFlagsForMACSettings adds flags to select fields in MACSettings.
func AddSetFlagsForMACSettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("class-b-timeout", prefix), "", hidden))
	AddSetFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-periodicity.value", prefix), flagsplugin.Prefix("ping-slot-periodicity", prefix), hidden)
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-data-rate-index.value", prefix), flagsplugin.Prefix("ping-slot-data-rate-index", prefix), hidden)
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("ping-slot-frequency", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-frequency.value", prefix), flagsplugin.Prefix("ping-slot-frequency", prefix), hidden)
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("beacon-frequency", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("beacon-frequency.value", prefix), flagsplugin.Prefix("beacon-frequency", prefix), hidden)
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("class-c-timeout", prefix), "", hidden))
	AddSetFlagsForRxDelayValue(flags, flagsplugin.Prefix("rx1-delay", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx1-delay.value", prefix), flagsplugin.Prefix("rx1-delay", prefix), hidden)
	AddSetFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx1-data-rate-offset.value", prefix), flagsplugin.Prefix("rx1-data-rate-offset", prefix), hidden)
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx2-data-rate-index.value", prefix), flagsplugin.Prefix("rx2-data-rate-index", prefix), hidden)
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("rx2-frequency", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx2-frequency.value", prefix), flagsplugin.Prefix("rx2-frequency", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint64SliceFlag(flagsplugin.Prefix("factory-preset-frequencies", prefix), "", hidden))
	AddSetFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("max-duty-cycle", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("max-duty-cycle.value", prefix), flagsplugin.Prefix("max-duty-cycle", prefix), hidden)
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("supports-32-bit-f-cnt.value", prefix), flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), hidden)
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("use-adr", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("use-adr.value", prefix), flagsplugin.Prefix("use-adr", prefix), hidden)
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("adr-margin.value", prefix), "", hidden))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("adr-margin.value", prefix), flagsplugin.Prefix("adr-margin", prefix), hidden)
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("resets-f-cnt", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("resets-f-cnt.value", prefix), flagsplugin.Prefix("resets-f-cnt", prefix), hidden)
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("status-time-periodicity", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("status-count-periodicity.value", prefix), "", hidden))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("status-count-periodicity.value", prefix), flagsplugin.Prefix("status-count-periodicity", prefix), hidden)
	AddSetFlagsForRxDelayValue(flags, flagsplugin.Prefix("desired-rx1-delay", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx1-delay.value", prefix), flagsplugin.Prefix("desired-rx1-delay", prefix), hidden)
	AddSetFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset.value", prefix), flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), hidden)
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx2-data-rate-index.value", prefix), flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), hidden)
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx2-frequency.value", prefix), flagsplugin.Prefix("desired-rx2-frequency", prefix), hidden)
	AddSetFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-max-duty-cycle.value", prefix), flagsplugin.Prefix("desired-max-duty-cycle", prefix), hidden)
	AddSetFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent.value", prefix), flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), hidden)
	AddSetFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent.value", prefix), flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), hidden)
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index.value", prefix), flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), hidden)
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-ping-slot-frequency.value", prefix), flagsplugin.Prefix("desired-ping-slot-frequency", prefix), hidden)
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-beacon-frequency.value", prefix), flagsplugin.Prefix("desired-beacon-frequency", prefix), hidden)
	AddSetFlagsForDeviceEIRPValue(flags, flagsplugin.Prefix("desired-max-eirp", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-max-eirp.value", prefix), flagsplugin.Prefix("desired-max-eirp", prefix), hidden)
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("class-b-c-downlink-interval", prefix), "", hidden))
}

// SetFromFlags sets the MACSettings message from flags.
func (m *MACSettings) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("class_b_timeout", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ClassBTimeout = gogo.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("class_b_timeout", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); changed {
		m.PingSlotPeriodicity = &PingSlotPeriodValue{}
		if setPaths, err := m.PingSlotPeriodicity.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); changed {
		m.PingSlotDataRateIndex = &DataRateIndexValue{}
		if setPaths, err := m.PingSlotDataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); changed {
		m.PingSlotFrequency = &FrequencyValue{}
		if setPaths, err := m.PingSlotFrequency.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("beacon_frequency", prefix)); changed {
		m.BeaconFrequency = &FrequencyValue{}
		if setPaths, err := m.BeaconFrequency.SetFromFlags(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("class_c_timeout", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ClassCTimeout = gogo.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("class_c_timeout", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx1_delay", prefix)); changed {
		m.Rx1Delay = &RxDelayValue{}
		if setPaths, err := m.Rx1Delay.SetFromFlags(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); changed {
		m.Rx1DataRateOffset = &DataRateOffsetValue{}
		if setPaths, err := m.Rx1DataRateOffset.SetFromFlags(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); changed {
		m.Rx2DataRateIndex = &DataRateIndexValue{}
		if setPaths, err := m.Rx2DataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx2_frequency", prefix)); changed {
		m.Rx2Frequency = &FrequencyValue{}
		if setPaths, err := m.Rx2Frequency.SetFromFlags(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint64Slice(flags, flagsplugin.Prefix("factory_preset_frequencies", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FactoryPresetFrequencies = val
		paths = append(paths, flagsplugin.Prefix("factory_preset_frequencies", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); changed {
		m.MaxDutyCycle = &AggregatedDutyCycleValue{}
		if setPaths, err := m.MaxDutyCycle.SetFromFlags(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix)); changed {
		m.Supports_32BitFCnt = &BoolValue{}
		if setPaths, err := m.Supports_32BitFCnt.SetFromFlags(flags, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("use_adr", prefix)); changed {
		m.UseAdr = &BoolValue{}
		if setPaths, err := m.UseAdr.SetFromFlags(flags, flagsplugin.Prefix("use_adr", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("adr_margin.value", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrMargin = &types.FloatValue{Value: val}
		paths = append(paths, flagsplugin.Prefix("adr_margin", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("resets_f_cnt", prefix)); changed {
		m.ResetsFCnt = &BoolValue{}
		if setPaths, err := m.ResetsFCnt.SetFromFlags(flags, flagsplugin.Prefix("resets_f_cnt", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("status_time_periodicity", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.StatusTimePeriodicity = gogo.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("status_time_periodicity", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("status_count_periodicity.value", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.StatusCountPeriodicity = &types.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("status_count_periodicity", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_rx1_delay", prefix)); changed {
		m.DesiredRx1Delay = &RxDelayValue{}
		if setPaths, err := m.DesiredRx1Delay.SetFromFlags(flags, flagsplugin.Prefix("desired_rx1_delay", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix)); changed {
		m.DesiredRx1DataRateOffset = &DataRateOffsetValue{}
		if setPaths, err := m.DesiredRx1DataRateOffset.SetFromFlags(flags, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix)); changed {
		m.DesiredRx2DataRateIndex = &DataRateIndexValue{}
		if setPaths, err := m.DesiredRx2DataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_rx2_frequency", prefix)); changed {
		m.DesiredRx2Frequency = &FrequencyValue{}
		if setPaths, err := m.DesiredRx2Frequency.SetFromFlags(flags, flagsplugin.Prefix("desired_rx2_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_max_duty_cycle", prefix)); changed {
		m.DesiredMaxDutyCycle = &AggregatedDutyCycleValue{}
		if setPaths, err := m.DesiredMaxDutyCycle.SetFromFlags(flags, flagsplugin.Prefix("desired_max_duty_cycle", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix)); changed {
		m.DesiredAdrAckLimitExponent = &ADRAckLimitExponentValue{}
		if setPaths, err := m.DesiredAdrAckLimitExponent.SetFromFlags(flags, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix)); changed {
		m.DesiredAdrAckDelayExponent = &ADRAckDelayExponentValue{}
		if setPaths, err := m.DesiredAdrAckDelayExponent.SetFromFlags(flags, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix)); changed {
		m.DesiredPingSlotDataRateIndex = &DataRateIndexValue{}
		if setPaths, err := m.DesiredPingSlotDataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_ping_slot_frequency", prefix)); changed {
		m.DesiredPingSlotFrequency = &FrequencyValue{}
		if setPaths, err := m.DesiredPingSlotFrequency.SetFromFlags(flags, flagsplugin.Prefix("desired_ping_slot_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_beacon_frequency", prefix)); changed {
		m.DesiredBeaconFrequency = &FrequencyValue{}
		if setPaths, err := m.DesiredBeaconFrequency.SetFromFlags(flags, flagsplugin.Prefix("desired_beacon_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_max_eirp", prefix)); changed {
		m.DesiredMaxEirp = &DeviceEIRPValue{}
		if setPaths, err := m.DesiredMaxEirp.SetFromFlags(flags, flagsplugin.Prefix("desired_max_eirp", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("class_b_c_downlink_interval", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ClassBCDownlinkInterval = gogo.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("class_b_c_downlink_interval", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForMACState adds flags to select fields in MACState.
func AddSelectFlagsForMACState(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("current-parameters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("current-parameters", prefix), true), hidden))
	// NOTE: current_parameters (MACParameters) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-parameters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-parameters", prefix), true), hidden))
	// NOTE: desired_parameters (MACParameters) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("device-class", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("device-class", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lorawan-version", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-confirmed-downlink-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-confirmed-downlink-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-periodicity", prefix), true), hidden))
	AddSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-application-downlink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-application-downlink", prefix), true), hidden))
	// NOTE: pending_application_downlink (ApplicationDownlink) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-responses", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-responses", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-requests", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-requests", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-join-accept", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-join-accept", prefix), true), hidden))
	// NOTE: queued_join_accept (MACState_JoinAccept) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-join-request", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-join-request", prefix), true), hidden))
	// NOTE: pending_join_request (MACState_JoinRequest) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-windows-available", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx-windows-available", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("recent-uplinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("recent-uplinks", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("recent-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("recent-downlinks", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-frequencies", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-frequencies", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-downlink-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-downlink-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-data-rate-ranges", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-data-rate-ranges", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forMACState message from select flags.
func PathsFromSelectFlagsForMACState(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("current_parameters", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("current_parameters", prefix))
	}
	// NOTE: current_parameters (MACParameters) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_parameters", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_parameters", prefix))
	}
	// NOTE: desired_parameters (MACParameters) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("device_class", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("device_class", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lorawan_version", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lorawan_version", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_confirmed_downlink_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_confirmed_downlink_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_dev_status_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_dev_status_f_cnt_up", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_periodicity", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_application_downlink", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_application_downlink", prefix))
	}
	// NOTE: pending_application_downlink (ApplicationDownlink) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued_responses", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("queued_responses", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_requests", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_requests", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued_join_accept", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("queued_join_accept", prefix))
	}
	// NOTE: queued_join_accept (MACState_JoinAccept) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_join_request", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_join_request", prefix))
	}
	// NOTE: pending_join_request (MACState_JoinRequest) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx_windows_available", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx_windows_available", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("recent_uplinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("recent_uplinks", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("recent_downlinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("recent_downlinks", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_network_initiated_downlink_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_network_initiated_downlink_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected_adr_data_rate_indexes", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejected_adr_data_rate_indexes", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected_adr_tx_power_indexes", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejected_adr_tx_power_indexes", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected_frequencies", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejected_frequencies", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_downlink_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_downlink_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected_data_rate_ranges", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejected_data_rate_ranges", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_adr_change_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_adr_change_f_cnt_up", prefix))
	}
	return paths, nil
}

// AddSetFlagsForMACState adds flags to select fields in MACState.
func AddSetFlagsForMACState(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForMACParameters(flags, flagsplugin.Prefix("current-parameters", prefix), hidden)
	AddSetFlagsForMACParameters(flags, flagsplugin.Prefix("desired-parameters", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("device-class", prefix), flagsplugin.EnumValueDesc(Class_value), hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.EnumValueDesc(MACVersion_value), hidden))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-confirmed-downlink-at", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix), "", hidden))
	AddSetFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix), hidden)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-periodicity.value", prefix), flagsplugin.Prefix("ping-slot-periodicity", prefix), hidden)
	AddSetFlagsForApplicationDownlink(flags, flagsplugin.Prefix("pending-application-downlink", prefix), hidden)
	// FIXME: Skipping QueuedResponses because repeated messages are currently not supported.
	// FIXME: Skipping PendingRequests because repeated messages are currently not supported.
	// FIXME: Skipping QueuedJoinAccept because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingJoinRequest because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-windows-available", prefix), "", hidden))
	// FIXME: Skipping RecentUplinks because repeated messages are currently not supported.
	// FIXME: Skipping RecentDownlinks because repeated messages are currently not supported.
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32SliceFlag(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint64SliceFlag(flagsplugin.Prefix("rejected-frequencies", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-downlink-at", prefix), "", hidden))
	// FIXME: Skipping RejectedDataRateRanges because maps with uint64 key types are currently not supported.
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix), "", hidden))
}

// SetFromFlags sets the MACState message from flags.
func (m *MACState) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("current_parameters", prefix)); changed {
		m.CurrentParameters = &MACParameters{}
		if setPaths, err := m.CurrentParameters.SetFromFlags(flags, flagsplugin.Prefix("current_parameters", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_parameters", prefix)); changed {
		m.DesiredParameters = &MACParameters{}
		if setPaths, err := m.DesiredParameters.SetFromFlags(flags, flagsplugin.Prefix("desired_parameters", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("device_class", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, Class_value)
		if err != nil {
			return nil, err
		}
		m.DeviceClass = Class(enumValue)
		paths = append(paths, flagsplugin.Prefix("device_class", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("lorawan_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, MACVersion_value)
		if err != nil {
			return nil, err
		}
		m.LorawanVersion = MACVersion(enumValue)
		paths = append(paths, flagsplugin.Prefix("lorawan_version", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last_confirmed_downlink_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastConfirmedDownlinkAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("last_confirmed_downlink_at", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_dev_status_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastDevStatusFCntUp = val
		paths = append(paths, flagsplugin.Prefix("last_dev_status_f_cnt_up", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); changed {
		m.PingSlotPeriodicity = &PingSlotPeriodValue{}
		if setPaths, err := m.PingSlotPeriodicity.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("pending_application_downlink", prefix)); changed {
		m.PendingApplicationDownlink = &ApplicationDownlink{}
		if setPaths, err := m.PendingApplicationDownlink.SetFromFlags(flags, flagsplugin.Prefix("pending_application_downlink", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	// FIXME: Skipping QueuedResponses because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingRequests because it does not seem to implement AddSetFlags.
	// FIXME: Skipping QueuedJoinAccept because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingJoinRequest because it does not seem to implement AddSetFlags.
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx_windows_available", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RxWindowsAvailable = val
		paths = append(paths, flagsplugin.Prefix("rx_windows_available", prefix))
	}
	// FIXME: Skipping RecentUplinks because it does not seem to implement AddSetFlags.
	// FIXME: Skipping RecentDownlinks because it does not seem to implement AddSetFlags.
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last_network_initiated_downlink_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastNetworkInitiatedDownlinkAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("last_network_initiated_downlink_at", prefix))
	}
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("rejected_adr_data_rate_indexes", prefix)); err != nil {
		return nil, err
	} else if changed {
		for _, v := range val {
			enumValue, err := flagsplugin.SetEnumString(v, DataRateIndex_value)
			if err != nil {
				return nil, err
			}
			m.RejectedAdrDataRateIndexes = append(m.RejectedAdrDataRateIndexes, DataRateIndex(enumValue))
		}
		paths = append(paths, flagsplugin.Prefix("rejected_adr_data_rate_indexes", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32Slice(flags, flagsplugin.Prefix("rejected_adr_tx_power_indexes", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RejectedAdrTxPowerIndexes = val
		paths = append(paths, flagsplugin.Prefix("rejected_adr_tx_power_indexes", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64Slice(flags, flagsplugin.Prefix("rejected_frequencies", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RejectedFrequencies = val
		paths = append(paths, flagsplugin.Prefix("rejected_frequencies", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last_downlink_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastDownlinkAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("last_downlink_at", prefix))
	}
	// FIXME: Skipping RejectedDataRateRanges because maps with uint64 key types are currently not supported.
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_adr_change_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastAdrChangeFCntUp = val
		paths = append(paths, flagsplugin.Prefix("last_adr_change_f_cnt_up", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForEndDevice adds flags to select fields in EndDevice.
func AddSelectFlagsForEndDevice(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true), hidden))
	// NOTE: ids (EndDeviceIdentifiers) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("name", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("description", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("description", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("version-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("version-ids", prefix), true), hidden))
	AddSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service-profile-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service-profile-id", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-server-address", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-server-kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-server-kek-label", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-address", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-kek-label", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-id", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("join-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("join-server-address", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("locations", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("locations", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("picture", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("picture", prefix), true), hidden))
	// NOTE: picture (Picture) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-b", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-class-b", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-c", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-class-c", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lorawan-version", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lorawan-phy-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lorawan-phy-version", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frequency-plan-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frequency-plan-id", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-frequency", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-frequency", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-join", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-join", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("resets-join-nonces", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("resets-join-nonces", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("root-keys", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("root-keys", prefix), true), hidden))
	// NOTE: root_keys (RootKeys) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("net-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("net-id", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mac-settings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mac-settings", prefix), true), hidden))
	// NOTE: mac_settings (MACSettings) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mac-state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mac-state", prefix), true), hidden))
	// NOTE: mac_state (MACState) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-mac-state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-mac-state", prefix), true), hidden))
	// NOTE: pending_mac_state (MACState) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session", prefix), true), hidden))
	// NOTE: session (Session) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-session", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-session", prefix), true), hidden))
	// NOTE: pending_session (Session) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-dev-nonce", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-dev-nonce", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("used-dev-nonces", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("used-dev-nonces", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-join-nonce", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-join-nonce", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-rj-count-0", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-rj-count-0", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-rj-count-1", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-rj-count-1", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-dev-status-received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-dev-status-received-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("power-state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("power-state", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("battery-percentage", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("battery-percentage", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-margin", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-margin", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-application-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-application-downlinks", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("formatters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("formatters", prefix), true), hidden))
	AddSelectFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("formatters", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provisioner-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provisioner-id", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provisioning-data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provisioning-data", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("multicast", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("multicast", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("claim-authentication-code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("claim-authentication-code", prefix), true), hidden))
	// NOTE: claim_authentication_code (EndDeviceAuthenticationCode) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("skip-payload-crypto", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto-override", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("skip-payload-crypto-override", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("activated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("activated-at", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forEndDevice message from select flags.
func PathsFromSelectFlagsForEndDevice(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ids", prefix))
	}
	// NOTE: ids (EndDeviceIdentifiers) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("updated_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("name", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("name", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("description", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("description", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("attributes", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("version_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service_profile_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("service_profile_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("network_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("network_server_kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_server_kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_server_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_server_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("join_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("join_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("locations", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("locations", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("picture", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("picture", prefix))
	}
	// NOTE: picture (Picture) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_class_b", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("supports_class_b", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_class_c", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("supports_class_c", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lorawan_version", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lorawan_version", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lorawan_phy_version", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lorawan_phy_version", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frequency_plan_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("frequency_plan_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("min_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_join", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("supports_join", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("resets_join_nonces", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("resets_join_nonces", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("root_keys", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("root_keys", prefix))
	}
	// NOTE: root_keys (RootKeys) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("net_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("net_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mac_settings", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mac_settings", prefix))
	}
	// NOTE: mac_settings (MACSettings) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mac_state", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mac_state", prefix))
	}
	// NOTE: mac_state (MACState) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_mac_state", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_mac_state", prefix))
	}
	// NOTE: pending_mac_state (MACState) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session", prefix))
	}
	// NOTE: session (Session) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_session", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_session", prefix))
	}
	// NOTE: pending_session (Session) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_dev_nonce", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_dev_nonce", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("used_dev_nonces", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("used_dev_nonces", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_join_nonce", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_join_nonce", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_rj_count_0", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_rj_count_0", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_rj_count_1", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_rj_count_1", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_dev_status_received_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_dev_status_received_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("power_state", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("power_state", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("battery_percentage", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("battery_percentage", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_margin", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_margin", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued_application_downlinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("queued_application_downlinks", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("formatters", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("formatters", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("formatters", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provisioner_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("provisioner_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provisioning_data", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("provisioning_data", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("multicast", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("multicast", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("claim_authentication_code", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("claim_authentication_code", prefix))
	}
	// NOTE: claim_authentication_code (EndDeviceAuthenticationCode) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip_payload_crypto", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("skip_payload_crypto", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip_payload_crypto_override", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("skip_payload_crypto_override", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("activated_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("activated_at", prefix))
	}
	return paths, nil
}

// AddSetFlagsForEndDevice adds flags to select fields in EndDevice.
func AddSetFlagsForEndDevice(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("name", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("description", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("attributes", prefix), "", hidden))
	AddSetFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("service-profile-id", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("network-server-address", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("network-server-kek-label", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-address", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-kek-label", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-id", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("join-server-address", prefix), "", hidden))
	// FIXME: Skipping Locations because maps with message value types are currently not supported.
	// FIXME: Skipping Picture because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-b", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-c", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.EnumValueDesc(MACVersion_value), hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("lorawan-phy-version", prefix), flagsplugin.EnumValueDesc(PHYVersion_value), hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("frequency-plan-id", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("min-frequency", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("max-frequency", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-join", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("resets-join-nonces", prefix), "", hidden))
	AddSetFlagsForRootKeys(flags, flagsplugin.Prefix("root-keys", prefix), hidden)
	flags.AddFlag(custom_flags.New3BytesFlag(flagsplugin.Prefix("net-id", prefix), "", hidden))
	AddSetFlagsForMACSettings(flags, flagsplugin.Prefix("mac-settings", prefix), hidden)
	AddSetFlagsForMACState(flags, flagsplugin.Prefix("mac-state", prefix), hidden)
	AddSetFlagsForMACState(flags, flagsplugin.Prefix("pending-mac-state", prefix), hidden)
	// FIXME: Skipping Session because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingSession because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-dev-nonce", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32SliceFlag(flagsplugin.Prefix("used-dev-nonces", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-join-nonce", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-rj-count-0", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-rj-count-1", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-dev-status-received-at", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("power-state", prefix), flagsplugin.EnumValueDesc(PowerState_value), hidden))
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("battery-percentage.value", prefix), "", hidden))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("battery-percentage.value", prefix), flagsplugin.Prefix("battery-percentage", prefix), hidden)
	flags.AddFlag(flagsplugin.NewInt32Flag(flagsplugin.Prefix("downlink-margin", prefix), "", hidden))
	// FIXME: Skipping QueuedApplicationDownlinks because repeated messages are currently not supported.
	AddSetFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("formatters", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("provisioner-id", prefix), "", hidden))
	// FIXME: Skipping ProvisioningData because this WKT is currently not supported.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("multicast", prefix), "", hidden))
	// FIXME: Skipping ClaimAuthenticationCode because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto-override.value", prefix), "", hidden))
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("skip-payload-crypto-override.value", prefix), flagsplugin.Prefix("skip-payload-crypto-override", prefix), hidden)
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("activated-at", prefix), "", hidden))
}

// SetFromFlags sets the EndDevice message from flags.
func (m *EndDevice) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix)); changed {
		m.Ids = &EndDeviceIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.CreatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.UpdatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("updated_at", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("name", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Name = val
		paths = append(paths, flagsplugin.Prefix("name", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("description", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Description = val
		paths = append(paths, flagsplugin.Prefix("description", prefix))
	}
	if val, changed, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("attributes", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Attributes = val
		paths = append(paths, flagsplugin.Prefix("attributes", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("version_ids", prefix)); changed {
		m.VersionIds = &EndDeviceVersionIdentifiers{}
		if setPaths, err := m.VersionIds.SetFromFlags(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("service_profile_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ServiceProfileId = val
		paths = append(paths, flagsplugin.Prefix("service_profile_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("network_server_address", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.NetworkServerAddress = val
		paths = append(paths, flagsplugin.Prefix("network_server_address", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("network_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.NetworkServerKekLabel = val
		paths = append(paths, flagsplugin.Prefix("network_server_kek_label", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application_server_address", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ApplicationServerAddress = val
		paths = append(paths, flagsplugin.Prefix("application_server_address", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ApplicationServerKekLabel = val
		paths = append(paths, flagsplugin.Prefix("application_server_kek_label", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application_server_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ApplicationServerId = val
		paths = append(paths, flagsplugin.Prefix("application_server_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("join_server_address", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.JoinServerAddress = val
		paths = append(paths, flagsplugin.Prefix("join_server_address", prefix))
	}
	// FIXME: Skipping Locations because maps with message value types are currently not supported.
	// FIXME: Skipping Picture because it does not seem to implement AddSetFlags.
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_class_b", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SupportsClassB = val
		paths = append(paths, flagsplugin.Prefix("supports_class_b", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_class_c", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SupportsClassC = val
		paths = append(paths, flagsplugin.Prefix("supports_class_c", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("lorawan_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, MACVersion_value)
		if err != nil {
			return nil, err
		}
		m.LorawanVersion = MACVersion(enumValue)
		paths = append(paths, flagsplugin.Prefix("lorawan_version", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("lorawan_phy_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, PHYVersion_value)
		if err != nil {
			return nil, err
		}
		m.LorawanPhyVersion = PHYVersion(enumValue)
		paths = append(paths, flagsplugin.Prefix("lorawan_phy_version", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("frequency_plan_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FrequencyPlanId = val
		paths = append(paths, flagsplugin.Prefix("frequency_plan_id", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("min_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MinFrequency = val
		paths = append(paths, flagsplugin.Prefix("min_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("max_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MaxFrequency = val
		paths = append(paths, flagsplugin.Prefix("max_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_join", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SupportsJoin = val
		paths = append(paths, flagsplugin.Prefix("supports_join", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("resets_join_nonces", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ResetsJoinNonces = val
		paths = append(paths, flagsplugin.Prefix("resets_join_nonces", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("root_keys", prefix)); changed {
		m.RootKeys = &RootKeys{}
		if setPaths, err := m.RootKeys.SetFromFlags(flags, flagsplugin.Prefix("root_keys", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := types1.GetNetID(flags, flagsplugin.Prefix("net_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.NetId = &val
		paths = append(paths, flagsplugin.Prefix("net_id", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mac_settings", prefix)); changed {
		m.MacSettings = &MACSettings{}
		if setPaths, err := m.MacSettings.SetFromFlags(flags, flagsplugin.Prefix("mac_settings", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mac_state", prefix)); changed {
		m.MacState = &MACState{}
		if setPaths, err := m.MacState.SetFromFlags(flags, flagsplugin.Prefix("mac_state", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("pending_mac_state", prefix)); changed {
		m.PendingMacState = &MACState{}
		if setPaths, err := m.PendingMacState.SetFromFlags(flags, flagsplugin.Prefix("pending_mac_state", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	// FIXME: Skipping Session because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingSession because it does not seem to implement AddSetFlags.
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_dev_nonce", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastDevNonce = val
		paths = append(paths, flagsplugin.Prefix("last_dev_nonce", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32Slice(flags, flagsplugin.Prefix("used_dev_nonces", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.UsedDevNonces = val
		paths = append(paths, flagsplugin.Prefix("used_dev_nonces", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_join_nonce", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastJoinNonce = val
		paths = append(paths, flagsplugin.Prefix("last_join_nonce", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_rj_count_0", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastRjCount_0 = val
		paths = append(paths, flagsplugin.Prefix("last_rj_count_0", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_rj_count_1", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastRjCount_1 = val
		paths = append(paths, flagsplugin.Prefix("last_rj_count_1", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last_dev_status_received_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastDevStatusReceivedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("last_dev_status_received_at", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("power_state", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, PowerState_value)
		if err != nil {
			return nil, err
		}
		m.PowerState = PowerState(enumValue)
		paths = append(paths, flagsplugin.Prefix("power_state", prefix))
	}
	if val, changed, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("battery_percentage.value", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BatteryPercentage = &types.FloatValue{Value: val}
		paths = append(paths, flagsplugin.Prefix("battery_percentage", prefix))
	}
	if val, changed, err := flagsplugin.GetInt32(flags, flagsplugin.Prefix("downlink_margin", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DownlinkMargin = val
		paths = append(paths, flagsplugin.Prefix("downlink_margin", prefix))
	}
	// FIXME: Skipping QueuedApplicationDownlinks because it does not seem to implement AddSetFlags.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("formatters", prefix)); changed {
		m.Formatters = &MessagePayloadFormatters{}
		if setPaths, err := m.Formatters.SetFromFlags(flags, flagsplugin.Prefix("formatters", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("provisioner_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ProvisionerId = val
		paths = append(paths, flagsplugin.Prefix("provisioner_id", prefix))
	}
	// FIXME: Skipping ProvisioningData because this WKT is not supported.
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("multicast", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Multicast = val
		paths = append(paths, flagsplugin.Prefix("multicast", prefix))
	}
	// FIXME: Skipping ClaimAuthenticationCode because it does not seem to implement AddSetFlags.
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip_payload_crypto", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SkipPayloadCrypto = val
		paths = append(paths, flagsplugin.Prefix("skip_payload_crypto", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip_payload_crypto_override.value", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SkipPayloadCryptoOverride = &types.BoolValue{Value: val}
		paths = append(paths, flagsplugin.Prefix("skip_payload_crypto_override", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("activated_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ActivatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("activated_at", prefix))
	}
	return paths, nil
}
