// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v0.0.0-dev
// - protoc              v3.17.3
// source: lorawan-stack/api/applicationserver_web.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	gogo "github.com/TheThingsIndustries/protoc-gen-go-flags/gogo"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForApplicationWebhookIdentifiers adds flags to select fields in ApplicationWebhookIdentifiers.
func AddSelectFlagsForApplicationWebhookIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-ids", prefix), true), hidden))
	AddSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("webhook-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("webhook-id", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationWebhookIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("webhook_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("webhook_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationWebhookIdentifiers adds flags to select fields in ApplicationWebhookIdentifiers.
func AddSetFlagsForApplicationWebhookIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForApplicationIdentifiers(flags, flagsplugin.Prefix("application-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("webhook-id", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationWebhookIdentifiers message from flags.
func (m *ApplicationWebhookIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("application_ids", prefix)); changed {
		m.ApplicationIds = &ApplicationIdentifiers{}
		if setPaths, err := m.ApplicationIds.SetFromFlags(flags, flagsplugin.Prefix("application_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("webhook_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.WebhookId = val
		paths = append(paths, flagsplugin.Prefix("webhook_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationWebhookTemplateIdentifiers adds flags to select fields in ApplicationWebhookTemplateIdentifiers.
func AddSelectFlagsForApplicationWebhookTemplateIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("template-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("template-id", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookTemplateIdentifiers message from select flags.
func PathsFromSelectFlagsForApplicationWebhookTemplateIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("template_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("template_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationWebhookTemplateIdentifiers adds flags to select fields in ApplicationWebhookTemplateIdentifiers.
func AddSetFlagsForApplicationWebhookTemplateIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("template-id", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationWebhookTemplateIdentifiers message from flags.
func (m *ApplicationWebhookTemplateIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("template_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.TemplateId = val
		paths = append(paths, flagsplugin.Prefix("template_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy adds flags to select fields in ApplicationWebhookHealth_WebhookHealthStatusHealthy.
func AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy(flags *pflag.FlagSet, prefix string, hidden bool) {
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookHealth_WebhookHealthStatusHealthy message from select flags.
func PathsFromSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	return paths, nil
}

// AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusUnhealthy adds flags to select fields in ApplicationWebhookHealth_WebhookHealthStatusUnhealthy.
func AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusUnhealthy(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("failed-attempts", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("failed-attempts", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-failed-attempt-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-failed-attempt-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-failed-attempt-details", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-failed-attempt-details", prefix), true), hidden))
	// NOTE: last_failed_attempt_details (ErrorDetails) does not seem to have select flags.
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookHealth_WebhookHealthStatusUnhealthy message from select flags.
func PathsFromSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusUnhealthy(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("failed_attempts", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("failed_attempts", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_failed_attempt_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_failed_attempt_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_failed_attempt_details", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_failed_attempt_details", prefix))
	}
	// NOTE: last_failed_attempt_details (ErrorDetails) does not seem to have select flags.
	return paths, nil
}

// AddSelectFlagsForApplicationWebhookHealth adds flags to select fields in ApplicationWebhookHealth.
func AddSelectFlagsForApplicationWebhookHealth(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status.healthy", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status.healthy", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy(flags, flagsplugin.Prefix("status.healthy", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status.unhealthy", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status.unhealthy", prefix), true), hidden))
	// NOTE: unhealthy (ApplicationWebhookHealth_WebhookHealthStatusUnhealthy) does not seem to have select flags.
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhookHealth message from select flags.
func PathsFromSelectFlagsForApplicationWebhookHealth(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status.healthy", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("status.healthy", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhookHealth_WebhookHealthStatusHealthy(flags, flagsplugin.Prefix("status.healthy", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status.unhealthy", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("status.unhealthy", prefix))
	}
	// NOTE: unhealthy (ApplicationWebhookHealth_WebhookHealthStatusUnhealthy) does not seem to have select flags.
	return paths, nil
}

// AddSelectFlagsForApplicationWebhook_Message adds flags to select fields in ApplicationWebhook_Message.
func AddSelectFlagsForApplicationWebhook_Message(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("path", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("path", prefix), false), hidden))
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhook_Message message from select flags.
func PathsFromSelectFlagsForApplicationWebhook_Message(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("path", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("path", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationWebhook_Message adds flags to select fields in ApplicationWebhook_Message.
func AddSetFlagsForApplicationWebhook_Message(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("path", prefix), "", hidden))
}

// SetFromFlags sets the ApplicationWebhook_Message message from flags.
func (m *ApplicationWebhook_Message) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("path", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Path = val
		paths = append(paths, flagsplugin.Prefix("path", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationWebhook adds flags to select fields in ApplicationWebhook.
func AddSelectFlagsForApplicationWebhook(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ids", prefix), true), hidden))
	// NOTE: ids (ApplicationWebhookIdentifiers) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("created-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("created-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("updated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("updated-at", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("base-url", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("base-url", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("headers", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("headers", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("format", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("format", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("template-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("template-ids", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhookTemplateIdentifiers(flags, flagsplugin.Prefix("template-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("template-fields", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("template-fields", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-api-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-api-key", prefix), false), hidden))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-message", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-message", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("uplink-message", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("join-accept", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("join-accept", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("join-accept", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-ack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-ack", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-ack", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-nack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-nack", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-nack", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-sent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-sent", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-sent", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-failed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-failed", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-failed", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-queued", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-queued", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queued", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-queue-invalidated", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-queue-invalidated", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location-solved", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location-solved", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("location-solved", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service-data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service-data", prefix), true), hidden))
	AddSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("service-data", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("health-status", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("health-status", prefix), true), hidden))
	// NOTE: health_status (ApplicationWebhookHealth) does not seem to have select flags.
}

// SelectFromFlags outputs the fieldmask paths forApplicationWebhook message from select flags.
func PathsFromSelectFlagsForApplicationWebhook(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ids", prefix))
	}
	// NOTE: ids (ApplicationWebhookIdentifiers) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("updated_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("updated_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("base_url", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("base_url", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("headers", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("headers", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("format", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("format", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("template_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("template_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhookTemplateIdentifiers(flags, flagsplugin.Prefix("template_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("template_fields", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("template_fields", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_api_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_api_key", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_message", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_message", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("uplink_message", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("join_accept", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("join_accept", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("join_accept", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_ack", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_ack", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink_ack", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_nack", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_nack", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink_nack", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_sent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_sent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink_sent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_failed", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_failed", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink_failed", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_queued", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_queued", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink_queued", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_queue_invalidated", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_queue_invalidated", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink_queue_invalidated", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location_solved", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("location_solved", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("location_solved", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service_data", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("service_data", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("service_data", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("health_status", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("health_status", prefix))
	}
	// NOTE: health_status (ApplicationWebhookHealth) does not seem to have select flags.
	return paths, nil
}

// AddSetFlagsForApplicationWebhook adds flags to select fields in ApplicationWebhook.
func AddSetFlagsForApplicationWebhook(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForApplicationWebhookIdentifiers(flags, flagsplugin.Prefix("ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("created-at", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("updated-at", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("base-url", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("headers", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("format", prefix), "", hidden))
	AddSetFlagsForApplicationWebhookTemplateIdentifiers(flags, flagsplugin.Prefix("template-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("template-fields", prefix), "", hidden))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("downlink-api-key", prefix), "", hidden))
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("uplink-message", prefix), hidden)
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("join-accept", prefix), hidden)
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-ack", prefix), hidden)
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-nack", prefix), hidden)
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-sent", prefix), hidden)
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-failed", prefix), hidden)
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queued", prefix), hidden)
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("downlink-queue-invalidated", prefix), hidden)
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("location-solved", prefix), hidden)
	AddSetFlagsForApplicationWebhook_Message(flags, flagsplugin.Prefix("service-data", prefix), hidden)
	// FIXME: Skipping HealthStatus because it does not seem to implement AddSetFlags.
}

// SetFromFlags sets the ApplicationWebhook message from flags.
func (m *ApplicationWebhook) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix)); changed {
		m.Ids = &ApplicationWebhookIdentifiers{}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("created_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.CreatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("created_at", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("updated_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.UpdatedAt = gogo.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("updated_at", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("base_url", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BaseUrl = val
		paths = append(paths, flagsplugin.Prefix("base_url", prefix))
	}
	if val, changed, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("headers", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Headers = val
		paths = append(paths, flagsplugin.Prefix("headers", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("format", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Format = val
		paths = append(paths, flagsplugin.Prefix("format", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("template_ids", prefix)); changed {
		m.TemplateIds = &ApplicationWebhookTemplateIdentifiers{}
		if setPaths, err := m.TemplateIds.SetFromFlags(flags, flagsplugin.Prefix("template_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("template_fields", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.TemplateFields = val
		paths = append(paths, flagsplugin.Prefix("template_fields", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("downlink_api_key", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DownlinkApiKey = val
		paths = append(paths, flagsplugin.Prefix("downlink_api_key", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("uplink_message", prefix)); changed {
		m.UplinkMessage = &ApplicationWebhook_Message{}
		if setPaths, err := m.UplinkMessage.SetFromFlags(flags, flagsplugin.Prefix("uplink_message", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("join_accept", prefix)); changed {
		m.JoinAccept = &ApplicationWebhook_Message{}
		if setPaths, err := m.JoinAccept.SetFromFlags(flags, flagsplugin.Prefix("join_accept", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_ack", prefix)); changed {
		m.DownlinkAck = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkAck.SetFromFlags(flags, flagsplugin.Prefix("downlink_ack", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_nack", prefix)); changed {
		m.DownlinkNack = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkNack.SetFromFlags(flags, flagsplugin.Prefix("downlink_nack", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_sent", prefix)); changed {
		m.DownlinkSent = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkSent.SetFromFlags(flags, flagsplugin.Prefix("downlink_sent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_failed", prefix)); changed {
		m.DownlinkFailed = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkFailed.SetFromFlags(flags, flagsplugin.Prefix("downlink_failed", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_queued", prefix)); changed {
		m.DownlinkQueued = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkQueued.SetFromFlags(flags, flagsplugin.Prefix("downlink_queued", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_queue_invalidated", prefix)); changed {
		m.DownlinkQueueInvalidated = &ApplicationWebhook_Message{}
		if setPaths, err := m.DownlinkQueueInvalidated.SetFromFlags(flags, flagsplugin.Prefix("downlink_queue_invalidated", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("location_solved", prefix)); changed {
		m.LocationSolved = &ApplicationWebhook_Message{}
		if setPaths, err := m.LocationSolved.SetFromFlags(flags, flagsplugin.Prefix("location_solved", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("service_data", prefix)); changed {
		m.ServiceData = &ApplicationWebhook_Message{}
		if setPaths, err := m.ServiceData.SetFromFlags(flags, flagsplugin.Prefix("service_data", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	// FIXME: Skipping HealthStatus because it does not seem to implement AddSetFlags.
	return paths, nil
}
